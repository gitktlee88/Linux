@ Extract "feeder.jar" to temp directory and modify some codes: /opt/java/jdk1.5/bin/jar -xvf feeder.jar
  Add "manifest.txt" file which should end with Enter-key(/n)
  Compress "feeder.jar" : /opt/java/jdk1.5/bin/jar -cvmf manifest.txt feeder.jar *
  
@ which shell type used
> ps $$  or  echo $0  ,   ( uname –a ) ,   ( uname –r )

> df -h    : to see file system
> ps -ef | grep httpd ( jboss, tomcat, ... )

- find 커맨드는 기본적으로 하위 폴더들을 재귀(recursive) 탐색하기 때문에 가장 상위 폴더의 경로를 써주기만 해도 
  하위 폴더들을 모두 뒤져서 파일들을 찾아 나열해 준다.
  
> find /etc -type f -exec cat '{}' \;
> find ./ -name "*.sh" -exec grep 'abc' {} \;
> find ./ -name "test" 2>/dev/null             : ignore errors whilst searching.

find 커맨드로 /etc 디렉토리에서 type이 파일인것들을 찾아서 -exec(실행) 시켜주세요 – 라는 의미이다. 
{ }가 의미하는것은 find 에서 찾은 파일을 말하는 것입니다. 그파일을 exec 다음에 오는 커맨드(cat)로 실행시켜 달라는 것.

그런데 “\;”는 exec 커맨드가 bash에서 실행될때에는 “\;” 라는 표기자를 만날때까지 읽고 실행시킨다.

> grep 'string' * -R | grep -Ev 'tmp|log'

> mv test.txt before-test.txt       : 파일이나 디렉토리를 다른 위치로 이동시키거나 파일명을 변경하고자 할때 사용한다.

> rm -r home/     : home 디렉토리를 삭제 (subdir 포함)

> cp -rp /home /home2    : 복사할때 파일의 소유자,그룹자,권한,시간정보등이 그대로 복사

@ dir&subdir copy from local to remote server
> scp -r /home/banana  pklee1@domain.name.net:/home/pklee1

touch ---- create multiple files with a single line text at one command.

> touch f{0..12} ; echo 'a first line' | tee f{0..12}
> echo 'a second line' | tee -a f{0..12}               -a  option appends output to existing file
> touch f211.txt ; cat f{2..11} | tee f211.txt         -to merge multiple files into a single file ( f211.txt ) 

if you want to be more eloquent, will empty logfile (actually they will truncate it to zero size).
> cat /dev/null > logfile

  cat bar.txt >> foo.txt       ....   to append a contains of bar.txt to to foo.txt
> echo 'text to append' >> file2
> printf "text to append\n" >> fileName

> head -n 20 test      : first 20 lines, <-c> 20 characters
> tail -n 20 test      : last 20 lines, <-c> 20 characters

cat test.txt | tr '[:upper:]' '[:lower:]'    to convert  to lowercase in the test.txt file.

///////////////////////////////////
///////// MySQL(MariaDb) //////////
///////////////////////////////////

@ How to connect to mysql server on Linux
[pklee1@m--sdp09 ~]$ /opt/mysql/mysql/bin/mysql -S/mysql/mysql.sock -u mqhcv -p

@ How to find if mysql port 3306 is running?
[pklee1@m--sdp09 ~]$ ps ax | grep 3306

MariaDB [(none)]> status
MariaDB [(none)]> use mqhcv
MariaDB [mqhcv]> show tables;
MariaDB [mqhcv]> select * from CustomerCode;
MariaDB [mqhcv]> Ctr-C  to exit database.

@ How to get size of mysql database?
MariaDB [mqhcv]> 
To get a result in MB:
SELECT
SUM(ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2)) AS "SIZE IN MB"
FROM INFORMATION_SCHEMA.TABLES
WHERE
TABLE_SCHEMA = "SCHEMA-NAME";

To get a result in GB:
SELECT
SUM(ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024 / 1024), 2)) AS "SIZE IN GB"
FROM INFORMATION_SCHEMA.TABLES
WHERE
TABLE_SCHEMA = "SCHEMA-NAME";

@ In order to migrate the database, there are two steps:

1, Step One—Perform a MySQL Dump:
Before transferring the database file to the new VPS, we first need to back it up on the original virtual server 
by using the mysqldump command.
mysqldump -u root -p --opt [database name] > [database name].sql

After the dump is performed, you are ready to transfer the database.

2, Step Two—Copy the Database:
SCP helps you copy the database. If you used the previous command, you exported your database to your home folder.
The SCP command has the following syntax:
scp [database name].sql [username]@[servername]:path/to/database/

A sample transfer might look like this:
scp newdatabase.sql user@example.com:~/

After you connect, the database will be transferred to the new virtual private server.

3, Step Three—Import the Database:
Once the data has been transferred to the new server, you can import the database into MySQL:

mysql -u root -p newdatabase < /path/to/newdatabase.sql

With that, your transfer via SCP will be complete.

