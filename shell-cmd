
>>> 
 2>&1의 의미는 표준 출력이 전달되는 곳으로 표준에러를 전달하라라는 의미입니다. 
이것은 Bourne쉘 연산자이기 때문에 csh에서는 사용할 수 없다. 
(0, 1, 2는 각각 stdin, stdout, stderr)

 >/dev/null 은 출력을 /dev/null로 하겠다는 소리입니다. 즉 출력이 안보이겠죠. 
"&" 는 백그라운드로 실행하라는 뜻.  
 &1이 의미하는 것은 출력을 표준 출력에다가 하겠다는 소리입니다. 
 &0은 당연히 표준 입력이 되겠죠. 

ex) 열흘 이상 지난 파일들을 자동으로 삭제하는 셸 스크립트.

#!/bin/sh 
cd ~/.Trash/ 
mytrash=`date +%F` 

mkdir ${mytrash} >/dev/null 2>&1; 
mv * ${mytrash} >/dev/null 2>&1; 
mv ${mytrash}/20??-??-?? . >/dev/null 2>&1; 

for dir in `ls -1d 20??-??-?? | sort -r | tail -n +11` 
do 
        rm -rf "${dir}" 
done 

ex) get the size of a file.

#!/bin/bash
FILENAME=/home/heiko/dummy/packages.txt
FILESIZE=$(wc -c "$FILENAME" | awk’{print $1}’)
echo "Size of $FILENAME = $FILESIZE bytes."






<< 리눅스기본 명령어 >>

>>>
APROPOS
: 명령을 알지 못한다면, 
: man 유틸리티를 -k(keyword) 옵션과 함께 사용하면 apropos를 실행한 것과 동일한 결과를 볼 수 있다.
> apropos 명령어

>>>
CD
$변수 : 변수에 지정된 디렉토리로 이동한다
~  : 로그인된 사용자의 홈 디렉토리로 이동한다. (루트 사용자라면 /root 로!
                                                               일반 사용자라면 /home/계정명)
~계정명  : 지정된 계정의 홈디렉토리로 이동한다. (아무나 다른 계정의 홈 디렉토리는 못간다.)
              관리자만이 사용할 수 있다고 보면 된다.(보통.. 예외는 관리자가  아무나 들어가라고 설정해놓으면 들어갈 수있다)
 
-  : cd - 를 입력하면 이전 디렉토리로 간다(상위 디렉토리랑은 다르다.) 
            만약 /root 에서 /usr/local 로 이동한 상태에서 cd - 를 입력하면
            /usr 가 아닌 /root 로 이동된다 

>>>
CP
: 복사할때 파일의 소유자,그룹자,권한,시간정보등이 그대로 복사.
> cp -rp /home /home2    

>>>
MV
: 파일이나 디렉토리를 다른 위치로 이동시키거나 파일명을 변경하고자 할 때.
> mv test.txt before-test.txt

>>>
RM
: home 디렉토리 삭제(subdir 포함)
> rm -r home/    
  : firstly, change permission of directory that you want to delete by using chmod :
  chmod -R 777 directory/ 
    and then remove directory by using command :
    rm -rf directory/.

>>>
CAT
: empty logfile (actually they will truncate it to zero size).
> cat /dev/null > logfile

:to append a contains of bar.txt to to foo.txt
> cat bar.txt >> foo.txt     

> echo 'text to append' >> file2
> printf "text to append\n" >> fileName

: convert  to lowercase in the test.txt file.
> cat test.txt | tr '[:upper:]' '[:lower:]'    

>>>
TOUCH
: create multiple files with a single line text at one command.

> touch f{0..12} ; echo 'a first line' | tee f{0..12}
> echo 'a second line' | tee -a f{0..12}         -a option appends output to existing file
> touch f211.txt ; cat f{2..11} | tee f211.txt   - to merge multiple files into a single file ( f211.txt ) 

>>>
FIND
- find 커맨드는 기본적으로 하위 폴더들을 재귀(recursive) 탐색하기 때문에 가장 상위 폴더의 경로를 써주기만 해도 
  하위 폴더들을 모두 뒤져서 파일들을 찾아 나열해 준다.
  
> find /etc -type f -exec cat '{}' \;
> find ./ -name "*.sh" -exec grep 'abc' {} \;
> find ./ -name "test" 2>/dev/null             : ignore errors whilst searching.

find 커맨드로 /etc 디렉토리에서 type이 파일인것들을 찾아서 -exec(실행) 시켜주세요 – 라는 의미이다. 
{ }는 find 에서 찾은 파일을 말하는 것입니다. 그파일을 exec 다음에 오는 커맨드 'cat' 로 실행시켜 달라는 것.
그런데 “\;”는 exec 커맨드가 bash에서 실행될때에는 “\;” 를 만날때까지 읽고 실행시킨다.

@ /tmp is supposed to be cleaned up on reboot, but if you don't reboot (which is normal for servers), 
    clean up will not happen.
> find /tmp -ctime +10 -exec rm -rf {} +
   will delete all files and folders older than 10 days. 

>>>
GREP, AWK, SED
: search somestring in subdirectory except tmp and log.
> grep 'somestring' * -R | grep -Ev 'tmp|log'

: awk [-f 프로그램파일] [-F 필드구분자] ["패턴{액션}"] [처리할 파일명]
(옵션)
    -f 프로그램 파일  awk 유틸리티의 실행 액션이 저장된 프로그램 파일을 지정
    -F 필드 구분자    필드 구분자를 지정
    "패턴{액션}"       패턴이 일치하면 액션이 실행된다. 

> awk -F : "{print $1, $6}" ./text.txt
 =  text.txt 파일에서 ":" 구부자를 이용하여 1번째와 6번째 필드를 프린트.

> awk "{print FILENAME}" test.txt 
 = test.txt 파일의 레코드 개수만큼 파일이름을 출력한다. 

> awk "{print NR}" test.txt
 = test.txt 파일의 레코드 번호를 출력한다. 

> awk 'BEGIN {FS="\t"} {print $1 ,  $2}' test.txt
 = test.txt 파일의 필드 구분자를 "\t" 으로 지정하고, 1번째와 2번째 필드를 프린트 한다. 

> awk 'BEGIN {FS="\t"; OFS ="-"} {print $1 ,  $2} END {print "총 레코드의 수 : " NR}' test.txt
 = test.txt 파일의 필드 구분자를 "\t" 로 지정하고, 1번째와 2번째 필드를 프린트 하되, 필드 구분자를 "-" 로 
    바꾸어 출력하고, 모든 레코드가 끝난 뒤, 총 레코드의 수를 출력한다. 

[스트림 편집기(SED)] 
ed명령어와 grep명령어 기능의 일부를 합친 것이 sed(stream editor)명령어이다.
sed명령어도 grep명령어와 같은 필터이지만 이 명령어는 파일을 수정할 수 있게 하는 반면 ed처럼 대화식처리는 불가능하다. 
sed명령어는 1개 라인씩 입력 라인을 읽어들여 표준출력으로 출력한다. 
sed는 각 라인을 읽을 때마다 ed에서 사용하던 형식의 대치작업을 실행한다. 일치하는 문자열이 있으면 
그 문자열을 대치한 후 출력하고 일치하는 문자열이 없으면 그 라인은 수정되지 않고 그대로 출력된다. 

치환(substitute)
> sed 's/addrass/address/' list.txt    : addrass를 address로 바꾼다. 단, 원본파일을 바꾸지 않고 표준출력만 한다. 
> sed 's/\t/\ /' list.txt                        : 탭문자를 엔터로 변환 

삭제(delete)
> sed '/TD/d' 1.html        : TD 문자가 포함된 줄을 삭제하여 출력한다.
> sed '/Src/!d' 1.html       : Src 문자가 있는 줄만 지우지 않는다.
> sed '1,2d' 1.html            : 처음 1줄, 2줄을 지운다.
> sed '/^$/d 1.html          : 공백라인을 삭제하는 명령이다. (★★★) 


>>>
HEAD, TAIL, MORE, LESS
> head -n 20 test   : first 20 lines, <-c> 20 characters
> tail -n 20 test      : last 20 lines, <-c> 20 characters

>>>
SCP
: dir&subdir copy from local to remote server
> scp -r /home/banana  pklee1@domain.name.net:/home/pklee1




<< 리눅스 system 명령어 >>

>>>
PS 
:which shell type & Linux used ?
> ps $$  or  echo $0  ,   ( uname –a ) ,   ( uname –r ),  ( cat /etc/issue )
> ps -ef | grep httpd ( jboss, tomcat, ... )

>>>
DF
: to see file system(tmpfs)
> df -h | grep tmpfs
> lsblk

>>>
접근 권한
  owner | group | other
   4  2  1   4  2  1    4  2  1
   r  w  x  r  w  x   r  w  x




@ Extract "feeder.jar" to temp directory and modify some codes: /opt/java/jdk1.5/bin/jar -xvf feeder.jar
  Add "manifest.txt" file which should end with Enter-key(/n)
  Compress "feeder.jar" : /opt/java/jdk1.5/bin/jar -cvmf manifest.txt feeder.jar *


command to get list of all installed software: <Ubuntu Linux>
# sudo dpkg --get-selections

virtualbox shared folder permissions
# sudo adduser tigerkt vboxsf
  then, reboot Guest OS.

copy a file from terminal to Desktop
# CP ./afilename ~/Desktop/
