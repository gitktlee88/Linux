///////////////////////////////////
///////// MySQL(MariaDb) //////////
///////////////////////////////////

@ How to connect to mysql server on Linux
[pklee1@m--sdp09 ~]$ 
/opt/mysql/mysql/bin/mysql -S/mysql/mysql.sock -u mqhcv -p

@ How to find if mysql port 3306 is running?
[pklee1@m--sdp09 ~]$ 
ps ax | grep 3306

MariaDB [(none)]> status
MariaDB [(none)]> use mqhcv
MariaDB [mqhcv]> show tables;
MariaDB [mqhcv]> select * from CustomerCode;
MariaDB [mqhcv]> Ctr-C  to exit database.

@ How to get size of mysql database?
MariaDB [mqhcv]> 
SELECT table_schema "DB Name",
        ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) "DB Size in MB" 
FROM information_schema.tables 
GROUP BY table_schema; 

@ In order to migrate the database, there are two steps:
//////////////////////////////////
1, Step One—Perform a MySQL Dump:
Before transferring the database file to the new VPS, we first need to back it up on the original 
virtual server by using the mysqldump command.

mysqldump -u root -p --opt [database name] > [database name].sql

After the dump is performed, you are ready to transfer the database.
////////////////////////////////
2, Step Two—Copy the Database:
SCP helps you copy the database. If you used the previous command, you exported your database 
to your home folder.
The SCP command has the following syntax:

scp [database name].sql [username]@[servername]:path/to/database/

A sample transfer might look like this:
scp newdatabase.sql user@example.com:~/

After you connect, the database will be transferred to the new virtual private server.
////////////////////////////////
3, Step Three—Import the Database:
Once the data has been transferred to the new server, you can import the database into MySQL:

mysql -u root -p newdatabase < /path/to/newdatabase.sql

With that, your transfer via SCP will be complete.


@ How to create table if not exist.
create database if not exists `test`;

USE `test`;


----------------------------------------------------------------------------
@ If I had to update millions of records I would probably opt to NOT update.
I would more likely do:
-----------------------
CREATE TABLE new_table as select <do the update "here"> from old_table;
> CREATE TABLE new_emp as
select empno, LOWER(ename) ename, JOB,
MGR, HIREDATE, SAL, COMM, DEPTNO
from emp;
=> Table created.
> DROP TABLE emp;
=> Table deleted.
> RENAME new_emp to emp;
=> Table renamed. 
--------------------------


- Normalization? -

It is a systematic approach of decomposing tables to eliminate data
redundancy(repetition) and undesirable characteristics
like Insertion, Update and Deletion Anomalies.

1NF: - to avoid redundancy by breaking down the table.
    - User table which is not Atomic.
ex1)     
        user_id,  fn  ,     ln   ,        email          , address
        5            KT     LEE     abc@xx.com     5, sandal road, new malden, surrey KT3...      
ex2)              
        user_id,     fn  ,     ln   ,        email       
        5            KT       LEE          abc@xx.com
                                           xyz@yy.com 
ex3)                 
        user_id,  fn  ,     ln   ,        email       
        5            KT     LEE     abc@xx.com
        5            KT     LEE     abc@xx.com               
            
    - to be Atomic you need to split User table.
      create email, address tables which has multiple columns.
    
    <User>                                                      <Email>
    user_id  (pk)                                              email_id  (pk)
    fn                                                         email
    ln                                                         user_id    (fk)

2NF: - (should be in 1NF) and to remove partial dependency with composit keys.

    <Author>                        <Book_author>                        <Book>
    author_id  (pk)                book_id  (fk)                         book_id  (pk)
    fn                             author_id   (fk)          ----->      isbn
    ln                             author_position          /
    birthdate                      isbn (x)       ----------
        
        
3NF: - (should be in 1NF, 2NF) and to remove transitive dependency.
    - A transitive dependency in a database is an indirect relationship 
    between values in the same table that causes a functional dependency.

    <Review>
    review_id  (pk)                        ----->       <Star>
    review                                /             star_id  (pk)
    star              ---\               /              star
    star_meaning      ---/   star_id    /               star_meaning
    user_id  (fk)
    
    
    
    
    
- Data Warehousing? -

A data warehouse is a copy of transaction data specifically structured for query and analysis. 

The purpose of D/W is to provide 'aggregate data' which is suitable for 'decision making'.



                <  SQL Commands >

   DDL          DML         DCL        TCL       Constraints
definition  manipulation  control  transaction

|- create    |- select    |- grant  |-commit     |- primaryKey
|- alter     |- insert    |- revoke |-rollback   |- foreignKey
|- drop      |- update    |-        |-save point |- check
|- truncate  |- delete    |-        |-           |- unique
|- rename    |-           |-        |-           |- default
|-           |-           |-        |-           |- not null
  [table]
[structure]

+--------+---------+-------+--------+---------+--------+
> mysql --user=your-user-name --password=your-password
or
> mysql -u your-user-name -p'Your-password' -h your-hostname

> show databases;
> use mysql;
> show tables;
+--------+---------+-------+--------+---------+--------+

> CREATE TABLE employee (emp_id INT, fname VARCHAR(25),
lname VARCHAR(25), gender CHAR, dept_id INT, salary INT,
PRIMARY KEY(emp_id)
);

> CREATE TABLE department(id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(25));

> DESCRIBE employee;

> ALTER TABLE employee MODIFY emp_id INT PRIMARY KEY;
> ALTER TABLE employee ADD gpa DECIMAL(3,2);

> ALTER TABLE department change name dept_name varchar(25);
> ALTER TABLE TABLE_NAME ADD INDEX (COLUMN_NAME);

> DROP DATABASE test;
> DROP TABLE new_emp_tbl;
> RENAME TABLE employee1 TO employee;
> TRUNCATE TABLE employee2;

> CREATE TABLE new_table AS (SELECT * FROM old_table);

> CREATE TABLE employee2
AS (SELECT *
FROM employee
WHERE id > 1000);


employee table
+--------+---------+-------+--------+---------+--------+
| emp_id | fname   | lname | gender | dept_id | salary |
+--------+---------+-------+--------+---------+--------+
|   2002 | Supe    | Man   | M      |       1 |  75000 |
|   2003 | Jane    | Mary  | F      |       2 |  50000 |
|   2004 | Kelly   | Kim   | M      |       1 |  55000 |
|   2005 | John    | Park  | M      |       2 |  80000 |
|   2006 | Kimm    | Lee   | F      |       2 |  90000 |
|   2007 | Say     | Yes   | M      |       1 |  70000 |
|   2008 | JunHo   | Lee   | M      |       3 |  80000 |
|   2009 | GwangHo | Lee   | M      |       5 |  80000 |
|   2010 | KJun    | Lee   | F      |       3 |  30000 |
|   2011 | Hoya    | Lee   | F      |       3 |  40000 |
+--------+---------+-------+--------+---------+--------+


> INSERT INTO employee
(emp_id, fname, lname, gender, dept_id, salary)
VALUES(2008, 'JunHo', 'Lee', 'M', 3, 80000);

> UPDATE employee
SET lname = 'Lee', salary = 75000
WHERE salary = 65000 AND fname = 'GwangHo';

> UPDATE employee
SET salary = (SELECT salary
   FROM employee2
   WHERE employee.fname = 'Kimm')
WHERE EXISTS (SELECT salary
   FROM employee2
   WHERE employee2.fname = 'Kimm');

> SELECT dept_id, SUM(salary) AS total_salaries
FROM employee
GROUP BY dept_id;

> SELECT dept_id, COUNT(*) AS high_salary
FROM employee
WHERE salary is NOT NULL AND salary > 60000
GROUP BY dept_id
ORDER BY dept_id;

> SELECT dept_id, MAX(salary) AS highest_salary
FROM employee
GROUP BY dept_id;

> SELECT dept_id, AVG(salary) AS average_salary
FROM employee
WHERE salary is NOT NULL
GROUP BY dept_id
ORDER BY AVG(salary) DESC;

/* return employee record with max salary */
SELECT *
FROM employee
WHERE salary = (select Max(salary) from employee);

/* select the highest salary in employee */
SELECT Max(salary)
FROM employee;

/* select 2nd highest salary in employee */
SELECT Max(salary)
FROM employee
WHERE salary Not In (select Max(salary) from employee);

/* select range of employee based on id */
SELECT *
FROM employee
Where emp_id between 2004 and 2007;

/* return employee name, highest salary and department */
SELECT e.fname, e.lname, e.salary, d.dept_name
FROM employee e Inner Join department d
ON (e.dept_id = d.dept_id)
where salary IN (select Max(salary) from employee);

/* return employee name, highest salary and department
   for each department*/
SELECT e.fname, e.lname, e.salary, d.dept_name
FROM employee e Inner Join department d
ON (e.dept_id = d.dept_id)
where salary IN (select Max(salary) from employee
group by dept_id);
