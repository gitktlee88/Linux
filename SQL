///////////////////////////////////
///////// MySQL(MariaDb) //////////
///////////////////////////////////

@ How to connect to mysql server on Linux
[pklee1@m--sdp09 ~]$ 
/opt/mysql/mysql/bin/mysql -S/mysql/mysql.sock -u mqhcv -p

@ How to find if mysql port 3306 is running?
[pklee1@m--sdp09 ~]$ 
ps ax | grep 3306

MariaDB [(none)]> status
MariaDB [(none)]> use mqhcv
MariaDB [mqhcv]> show tables;
MariaDB [mqhcv]> select * from CustomerCode;
MariaDB [mqhcv]> Ctr-C  to exit database.

@ How to get size of mysql database?
MariaDB [mqhcv]> 
SELECT table_schema "DB Name",
        ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) "DB Size in MB" 
FROM information_schema.tables 
GROUP BY table_schema; 

@ In order to migrate the database, there are two steps:
//////////////////////////////////
1, Step One—Perform a MySQL Dump:
Before transferring the database file to the new VPS, we first need to back it up on the original 
virtual server by using the mysqldump command.

mysqldump -u root -p --opt [database name] > [database name].sql

After the dump is performed, you are ready to transfer the database.
////////////////////////////////
2, Step Two—Copy the Database:
SCP helps you copy the database. If you used the previous command, you exported your database 
to your home folder.
The SCP command has the following syntax:

scp [database name].sql [username]@[servername]:path/to/database/

A sample transfer might look like this:
scp newdatabase.sql user@example.com:~/

After you connect, the database will be transferred to the new virtual private server.
////////////////////////////////
3, Step Three—Import the Database:
Once the data has been transferred to the new server, you can import the database into MySQL:

mysql -u root -p newdatabase < /path/to/newdatabase.sql

With that, your transfer via SCP will be complete.


@ How to create table if not exist.
create database if not exists `test`;

USE `test`;

SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;

/*Table structure for table `test` */

***CREATE TABLE IF NOT EXISTS `tblsample` (
  `id` int(11) NOT NULL auto_increment,   
  `recid` int(11) NOT NULL default '0',       
  `cvfilename` varchar(250)  NOT NULL default '',     
  `cvpagenumber`  int(11) NULL,     
  `cilineno` int(11)  NULL,    
  `batchname`  varchar(100) NOT NULL default '',
  `type` varchar(20) NOT NULL default '',    
  `data` varchar(100) NOT NULL default '',
   PRIMARY KEY  (`id`)
);***


@ How to add columns
ALTER TABLE `SCHEMANAME`.`TABLE1` 
ADD COLUMN `FK_COLUMN` BIGINT(20) NOT NULL, 
ADD CONSTRAINT `FK_TABLE2_COLUMN` FOREIGN KEY (`FK_COLUMN`) 
REFERENCES `SCHEMANAME`.`TABLE2`(`PK_COLUMN`);

----------------------------------------------------------------------------
@ If I had to update millions of records I would probably opt to NOT update.
I would more likely do:
-----------------------
CREATE TABLE new_table as select <do the update "here"> from old_table;
> CREATE TABLE new_emp as
select empno, LOWER(ename) ename, JOB,
MGR, HIREDATE, SAL, COMM, DEPTNO
from emp;
=> Table created.
> DROP TABLE emp;
=> Table deleted.
> RENAME new_emp to emp;
=> Table renamed. 
--------------------------

@ Create a table
> CREATE TABLE person(
        ID INT NOT NULL,
        Name CHAR(32)
        );

@ Insert and update a table
> INSERT INTO Person VALUES ('1', 'Smith');
> UPDATE Person
        SET Name = 'Anderson'
        WHERE ID = 1;

@ Delete and drop a table
> DELETE FROM Person
        WHERE ID = 1;
        
@ Change a table structure
  add new column
> ALTER TABLE Person
        ADD new;
  delete old column
> ALTER TABLE Person
        DROP COLUMN old;
        
